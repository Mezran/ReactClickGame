{"version":3,"sources":["components/Image.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","className","src","link","alt","onClick","cB","bind","this","name","App","state","userScore","userMaxScore","cards","photo","clickedOn","handleClick","includes","setState","sort","Math","random","length","map","person","i","key","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAgBeA,MAbf,SAAgBC,GACd,OACE,oCACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKF,EAAMG,KAChBF,UAAU,yBACVG,IAAI,sBACJC,QAAWL,EAAMM,GAAGC,KAAKC,KAAMR,EAAMS,WCsG9BC,G,iNA1GbC,MAAQ,CACNC,UAAW,EACXC,aAAc,EAEdC,MAAO,CAAC,CACNL,KAAM,gBACNM,MAAO,kEACPC,WAAW,GACV,CACDP,KAAM,cACNM,MAAO,iEACPC,WAAW,GACV,CACDP,KAAM,iBACNM,MAAO,oEACPC,WAAW,GACV,CACDP,KAAM,aACNM,MAAO,iEACPC,WAAW,GACV,CACDP,KAAM,eACNM,MAAO,8EACPC,WAAW,GACV,CACDP,KAAM,eACNM,MAAO,4EACPC,WAAW,GACV,CACDP,KAAM,gBACNM,MAAO,mEACPC,WAAW,GACV,CACDP,KAAM,cACNM,MAAO,iEACPC,WAAW,GACV,CACDP,KAAM,kBACNM,MAAO,mFACPC,WAAW,GACV,CACDP,KAAM,gBACNM,MAAO,iFACPC,WAAW,GACV,CACDP,KAAM,iBACNM,MAAO,oEACPC,WAAW,GACV,CACDP,KAAM,cACNM,MAAO,kFACPC,WAAW,IAGbA,UAAW,I,EAGbC,YAAc,SAAAR,GAAS,IAAD,EACgC,EAAKE,MAAlDK,EADa,EACbA,UAAWJ,EADE,EACFA,UAAWC,EADT,EACSA,aAAcC,EADvB,EACuBA,MACvCE,EAAUE,SAAST,IACrB,EAAKU,SAAS,CACZH,UAAW,GACXJ,UAAW,IAEVA,EAAYC,GACb,EAAKM,SAAS,CACZN,aAAcD,KAIlB,EAAKO,SAAS,CACZH,UAAU,GAAD,mBAAMA,GAAN,CAAiBP,IAC1BG,UAAWA,EAAY,EACvBE,MAAOA,EAAMM,MAAK,kBAAMC,KAAKC,SAAU,S,wEAKlC,IAAD,OACR,OACE,oCACA,yBAAKrB,UAAU,aACb,wBAAIA,UAAU,aAAd,wBACA,uBAAGA,UAAU,QAAb,mFACA,wBAAIA,UAAU,SACd,0CAAgBO,KAAKG,MAAMC,WAC3B,8CAAoBJ,KAAKG,MAAME,eAEhCL,KAAKG,MAAMG,MAAMS,OAChBf,KAAKG,MAAMG,MAAMU,KAAI,SAACC,EAAQC,GAAT,OACnB,kBAAC,EAAD,CACAC,IAAKD,EACLE,GAAIF,EACJjB,KAAQgB,EAAOhB,KACfN,KAAMsB,EAAOV,MACbT,GAAK,EAAKW,iBAIZ,iE,GApGUY,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.777c4f4c.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./style.css\"\n\nfunction Image (props) {\n  return(\n    <>\n      <div className=\"card\">\n        <img src={props.link}\n        className=\"card-img-top cardImage\"\n        alt=\"something goes here\"\n        onClick = {props.cB.bind(this, props.name)}/>\n      </div>\n    </>\n  )\n}\n\nexport default Image;\n","import React from 'react';\nimport Image from \"./components/Image\";\n\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    userScore: 0,\n    userMaxScore: 0,\n\n    cards: [{\n      name: \"Michael Scott\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/d/dc/MichaelScott.png\",\n      clickedOn: false\n    }, {\n      name: \"Jim Halpert\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/7/7e/Jim-halpert.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Dwight Schrute\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/c/cd/Dwight_Schrute.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Pam Beesly\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/6/67/Pam_Beesley.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Kevin Malone\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/6/60/Office-1200-baumgartner1.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Andy Bernard\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/8/84/Andy_Bernard_photoshot.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Angela Martin\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/0/0b/Angela_Martin.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Erin Hannon\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/9/93/Erin_Hannon.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Toby Flenderson\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/1/18/Toby_Flenderson_promo_picture.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Creed Bratton\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/c/cd/CreedBratton%28TheOffice%29.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Stanley Hudson\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/2/23/Stanley_Hudson.jpg\",\n      clickedOn: false\n    }, {\n      name: \"Ryan Howard\",\n      photo: \"https://upload.wikimedia.org/wikipedia/en/9/91/Ryan_Howard_%28The_Office%29.jpg\",\n      clickedOn: false\n    }],\n\n    clickedOn: []\n  }\n\n  handleClick = name => {\n    const {clickedOn, userScore, userMaxScore, cards} = this.state;\n    if (clickedOn.includes(name)) {\n      this.setState({\n        clickedOn: [],\n        userScore: 0\n      })\n      if(userScore > userMaxScore){\n        this.setState({\n          userMaxScore: userScore\n        })\n      }\n    } else {\n      this.setState({\n        clickedOn: [...clickedOn, name],\n        userScore: userScore + 1,\n        cards: cards.sort(() => Math.random() -0.5)\n      })\n    }\n  }\n\n  render () {\n    return (\n      <>\n      <div className=\"jumbotron\">\n        <h1 className=\"display-4\">React Clicly Game!!!</h1>\n        <p className=\"lead\">Try your best at clicking on each member of 'The Office', but only do it once!!</p>\n        <hr className=\"my-4\"/>\n        <p>user score: {this.state.userScore}</p>\n        <p>user max score: {this.state.userMaxScore}</p>\n      </div>\n      {this.state.cards.length ? (\n        this.state.cards.map((person, i) => (\n          <Image\n          key={i}\n          id={i}\n          name = {person.name}\n          link={person.photo}\n          cB= {this.handleClick}\n          />\n        ))\n      ) : (\n        <h2> something has messed up :( </h2>\n      ) }\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}